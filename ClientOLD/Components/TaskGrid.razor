@if (Tasks is null || !Tasks.Any())
{
    <h2>No task</h2>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>User</th>
                <th>Status</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in Tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.User?.UserName</td>
                    <td>@task.Status</td>
                    <td>
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary" aria-label="Edit task" @onclick="() => EditTask(task)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            @if (task.Status == TaskViewModel.TaskStatus.ToDo)
                            {
                                <button type="button" class="btn btn-outline-primary" aria-label="Start working on task" @onclick="() => StartTask(task)">
                                    <span class="oi oi-timer"></span>
                                </button>
                            }
                            else if (task.Status == TaskViewModel.TaskStatus.InProgress)
                            {
                                <button type="button" class="btn btn-outline-warning" aria-label="Move back task" @onclick="() => MoveBackTask(task)">
                                    <span class="oi oi-media-skip-backward"></span>
                                </button>
                                <button type="button" class="btn btn-outline-success" aria-label="Complete task" @onclick="() => CompleteTask(task)">
                                    <span class="oi oi-check"></span>
                                </button>
                            }
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public IList<TaskViewModel> Tasks { get; set; }

    [Parameter]
    public EventCallback<TaskViewModel> OnTaskEditing { get; set; }

    [Parameter]
    public EventCallback<TaskViewModel> OnTaskStarted { get; set; }

    [Parameter]
    public EventCallback<TaskViewModel> OnTaskCompleted { get; set; }

    [Parameter]
    public EventCallback<TaskViewModel> OnTaskMovedBack { get; set; }

    async Task EditTask(TaskViewModel task) => await OnTaskEditing.InvokeAsync(task);

    async Task StartTask(TaskViewModel task) => await OnTaskStarted.InvokeAsync(task);

    async Task CompleteTask(TaskViewModel task) => await OnTaskCompleted.InvokeAsync(task);

    async Task MoveBackTask(TaskViewModel task) => await OnTaskMovedBack.InvokeAsync(task);
}
