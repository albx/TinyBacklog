@page "/"

@inject HttpClient Http
@attribute [Authorize]

<h1>TinyBacklog</h1>

<div class="row">
    <div class="col-md-8">
        <TaskGrid Tasks="tasks"
                  OnTaskEditing="EditTask"
                  OnTaskStarted="StartTask"
                  OnTaskCompleted="CompleteTask"
                  OnTaskMovedBack="MoveBackTask"
                  OnTaskRemoved="DeleteTask"/>
    </div>
    <div class="col-md-4">
        <TaskForm Task="currentTask"
                  OnTaskEditingCanceled="Cancel"
                  OnTaskSaved="SaveTask"/>
    </div>
</div>

@code {
    IList<TaskViewModel>? tasks;
    TaskViewModel currentTask = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadTasks();
    }

    async Task LoadTasks()
        => tasks = await Http.GetFromJsonAsync<IList<TaskViewModel>>("api/TaskList");

    async Task SaveTask(TaskViewModel task)
    {
        if (task.Id == Guid.Empty)
        {
            await CreateNewTask(task);
        }
        else
        {
            await UpdateTask(task);
        }
    }

    private async Task CreateNewTask(TaskViewModel task)
    {
        var response = await Http.PostAsJsonAsync("api/CreateTask", task);
        if (response.IsSuccessStatusCode)
        {
            currentTask = new();

            var newTask = await response.Content.ReadFromJsonAsync<TaskViewModel>();
            if (newTask is not null)
            {
                tasks?.Add(newTask);
            }
        }
    }

    private async Task UpdateTask(TaskViewModel task)
    {
        var response = await Http.PutAsJsonAsync("api/UpdateTask", task);
        if (response.IsSuccessStatusCode)
        {
            currentTask = new();
        }
    }

    async Task DeleteTask(TaskViewModel task)
    {
        var response = await Http.DeleteAsync($"api/DeleteTask/{task.Id}");
        if (response.IsSuccessStatusCode)
        {
            tasks?.Remove(task);
        }
    }

    async Task StartTask(TaskViewModel task)
    {
        var model = new UpdateTaskStatusViewModel
        {
            TaskId = task.Id,
            Status = TaskViewModel.TaskStatus.InProgress
        };

        var response = await Http.PatchAsync("api/UpdateTaskStatus", JsonContent.Create(model));
        if (response.IsSuccessStatusCode)
        {
            task.Status = TaskViewModel.TaskStatus.InProgress;
        }
    }

    async Task CompleteTask(TaskViewModel task)
    {
        var model = new UpdateTaskStatusViewModel
        {
            TaskId = task.Id,
            Status = TaskViewModel.TaskStatus.Completed
        };

        var response = await Http.PatchAsync("api/UpdateTaskStatus", JsonContent.Create(model));
        if (response.IsSuccessStatusCode)
        {
            task.Status = TaskViewModel.TaskStatus.Completed;
        }
    }

    async Task MoveBackTask(TaskViewModel task)
    {
        var model = new UpdateTaskStatusViewModel
        {
            TaskId = task.Id,
            Status = TaskViewModel.TaskStatus.ToDo
        };

        var response = await Http.PatchAsync("api/UpdateTaskStatus", JsonContent.Create(model));
        if (response.IsSuccessStatusCode)
        {
            task.Status = TaskViewModel.TaskStatus.ToDo;
        }
    }

    void EditTask(TaskViewModel task) => currentTask = task;

    void Cancel() => currentTask = new();
}
