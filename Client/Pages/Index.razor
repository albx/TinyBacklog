@page "/"
@inject HttpClient Http

<h1>TinyBacklog</h1>

<div class="row">
    <div class="col-md-8">
        @if (tasks is null || !tasks.Any())
        {
            <h2>No task</h2>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>User</th>
                        <th>Status</th>
                        <th>&nbsp;</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in tasks)
                    {
                        <tr>
                            <td>@task.Title</td>
                            <td>@task.User?.UserName</td>
                            <td>@task.Status</td>
                            <td>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-primary" aria-label="Edit task" @onclick="() => EditTask(task)">
                                        <span class="oi oi-pencil"></span>
                                    </button>
                                    @if (task.Status == TaskViewModel.TaskStatus.ToDo)
                                    {
                                        <button type="button" class="btn btn-outline-primary" aria-label="Start working on task" @onclick="() => StartTask(task)">
                                            <span class="oi oi-timer"></span>
                                        </button>
                                    }
                                    else if (task.Status == TaskViewModel.TaskStatus.InProgress)
                                    {
                                        <button type="button" class="btn btn-outline-success" aria-label="Complete task" @onclick="() => CompleteTask(task)">
                                            <span class="oi oi-check"></span>
                                        </button>
                                        <button type="button" class="btn btn-outline-warning" aria-label="Move back task" @onclick="() => MoveBackTask(task)">
                                            <span class="oi oi-media-skip-backward"></span>
                                        </button>
                                    }
                                </div>
                                @*<button type="button" class="btn btn-danger" aria-label="Delete task" @onclick="() => DeleteTask(task)">
                                    <span class="oi oi-trash"></span>
                                </button>*@
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-4">
        <EditForm Model="currentTask" OnValidSubmit="SaveTask">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Title</label>
                <InputText @bind-Value="currentTask.Title" class="form-control" />
                <ValidationMessage For="@(() => currentTask.Title)" />
            </div>
            <div class="form-group">
                <label>Description</label>
                <InputTextArea @bind-Value="currentTask.Description" class="form-control" />
            </div>

            <div class="btn-group">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-outline-primary">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    IList<TaskViewModel> tasks;
    TaskViewModel currentTask = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadTasks();
    }

    async Task LoadTasks()
        => tasks = await Http.GetFromJsonAsync<IList<TaskViewModel>>("api/TaskList");

    async Task SaveTask()
    {
        if (currentTask.Id == Guid.Empty)
        {
            await CreateNewTask();
        }
        else
        {
            await UpdateTask();
        }
    }

    private async Task CreateNewTask()
    {
        var response = await Http.PostAsJsonAsync("api/CreateTask", currentTask);
        if (response.IsSuccessStatusCode)
        {
            currentTask = new();

            var newTask = await response.Content.ReadFromJsonAsync<TaskViewModel>();
            tasks.Add(newTask);
        }
    }

    private async Task UpdateTask()
    {
        var response = await Http.PutAsJsonAsync("api/UpdateTask", currentTask);
        if (response.IsSuccessStatusCode)
        {
            currentTask = new();
        }
    }

    async Task DeleteTask(TaskViewModel task)
    {
        var response = await Http.DeleteAsync($"api/DeleteTask/{task.Id}");
        if (response.IsSuccessStatusCode)
        {
            tasks.Remove(task);
        }
    }

    async Task StartTask(TaskViewModel task)
    {
        var model = new UpdateTaskStatusViewModel
        {
            TaskId = task.Id,
            Status = TaskViewModel.TaskStatus.InProgress
        };

        var response = await Http.PatchAsync("api/UpdateTaskStatus", JsonContent.Create(model));
        if (response.IsSuccessStatusCode)
        {
            task.Status = TaskViewModel.TaskStatus.InProgress;
        }
    }

    async Task CompleteTask(TaskViewModel task)
    {
        var model = new UpdateTaskStatusViewModel
        {
            TaskId = task.Id,
            Status = TaskViewModel.TaskStatus.Completed
        };

        var response = await Http.PatchAsync("api/UpdateTaskStatus", JsonContent.Create(model));
        if (response.IsSuccessStatusCode)
        {
            task.Status = TaskViewModel.TaskStatus.Completed;
        }
    }

    async Task MoveBackTask(TaskViewModel task)
    {
        var model = new UpdateTaskStatusViewModel
        {
            TaskId = task.Id,
            Status = TaskViewModel.TaskStatus.ToDo
        };

        var response = await Http.PatchAsync("api/UpdateTaskStatus", JsonContent.Create(model));
        if (response.IsSuccessStatusCode)
        {
            task.Status = TaskViewModel.TaskStatus.ToDo;
        }
    }

    void EditTask(TaskViewModel task) => currentTask = task;
}
